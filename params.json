{"name":"Delayed Async Queue","tagline":"A Google Analytics like queue (think _gaq) used to process things asyncronously","body":"> This is an alpha work in progress. It's used in production at the moment but this is an attempt to make it its own stand-alone library. Use at your own risk...for now.\r\n\r\n## Getting Started\r\n\r\n```\r\nnpm install daq\r\n```\r\n\r\nThis is indented to be used in the browser, not on the server, since the nature of the problem it tries to solve is allow third party code to trigger things in your client-side app later, when it loads.\r\n\r\n## Examples\r\n\r\n``` javascript\r\n// [Third-Party Code]\r\n// 3rd party code (such as A/B testing tool) pushes stuff in the queue to be executed later when the page is loaded\r\n// Note: the window scope of the third-party script should match the window scope your app is executing in\r\n//       otherwise the queue (window._daq) will be empty or undefined.\r\nwindow._daq = window._daq || [];\r\n_daq.push([() => {\r\n  console.log('hi there queue, thanks for running me!');\r\n}]);\r\n\r\n// [Your App Code]\r\n// Run the queue in your app\r\nimport DelayedAsyncQueue from 'daq';\r\nconst queue = new DelayedAsyncQueue(queue = window._daq); // pass in the queue from above\r\nqueue.start();\r\n\r\n// ...\r\n// you'll see the following in console after a second or two\r\n// > hi there queue, thanks for running me!\r\n\r\n// done processing everything? stop the queue\r\nqueue.stop();\r\n```\r\n\r\n## Notes\r\n\r\nThe current setup only supports executing anonymous functions at the moment. The next step is to allow named functions and namespaced functions, such as:\r\n\r\n```\r\n_daq.push(['someCoolFunction', 'do-something']); // test named function\r\n_daq.push(['App.mynamespacedfunction', 'some-something-else', 'more data']); // test namespaced function\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}